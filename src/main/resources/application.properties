# http://localhost:8083/spring/swagger-ui/index.html#/
# https://dev-16206041-admin.okta.com/admin/getting-started

#=========================================================
#Print Auto-config logs
debug=false
spring.jmx.enabled=true

#Profile
#Also ENV_VAR: export SPRING_PROFILES_ACTIVE="dev2"
spring.profiles.active=dev1
spring.application.name=spring
spring.banner.location=classpath:banner.txt

#Add additional location to lookup spring prop file
# load these file into Env API. no additional code needed.
spring.config.location=classpath:/com/lekhraj/java/spring/SpringProperties/resources/
#spring.config.import=classpath:/com/lekhraj/java/spring/SpringProperties/resources/

#### My props for Advance DI  #####
valuesMap={key1: '1', key2: '2', key3: '3'}
listOfValues=A,B,C

#### Logging levels #####
logging.level.org.springframework.web=DEBUG
logging.level.org.hibernate=ERROR

#### Actuator #####
management.endpoints.web.exposure.include=*
management.endpoint.shutdown.enabled=true
management.endpoints.web.base-path=/actuator

management.metrics.export.prometheus.enabled=true
management.metrics.tags.application=spring-lekhraj-app
management.metrics.enable.all=true

#### Web  #####
server.servlet.contextPath=/spring
server.port=8083
server.error.404=/error/404
server.error.403=/error/403
server.error.path=/error-controller
#server.error.path=/error

## SWAGGER API DOC
spring.mvc.pathmatch.matching-strategy=ant_path_matcher
springdoc.packagesToScan=com.lekhraj.java.spring
springdoc.pathToScan=/**

#### SB - Custom Configuartion ####
sb.customize.configuration.feature1=enable
sb.customize.configuration.feature2=enable

##### MAIL####
mail.hostname=mailer@mail.com
mail.port=9000
mail.from=mailer@mail.com
#List properties
mail.defaultRecipients[0]=admin@mail.com
mail.defaultRecipients[1]=owner@mail.com
#Map Properties
mail.additionalHeaders.redelivery=true
mail.additionalHeaders.secure=true
#Object properties
mail.credentials1.username=john
mail.credentials1.password=password
mail.credentials1.authMethod=SHA1
mail.credentials2=john2,password2

##############################
####### jackson / json #####
##############################
spring.jackson.serialization.write-dates-as-timestamps=false
spring.jackson.default-property-inclusion=non_null

##############################
#### Security             ####
##############################
spring.security.user.name=lekhraj
spring.security.user.password=lekhraj

###############
#### JPA  #####
###############
### A. apply database schema and data initialization scripts during application startup.
spring.sql.init.mode=always

### B. H2 Database
spring.h2.console.enabled=true

h2.datasource.url=jdbc:h2:~/springapp
h2.datasource.driverClassName=org.h2.Driver
h2.datasource.username=sa
h2.datasource.password=password

h2.jpa.properties.hibernate.dialect=org.hibernate.dialect.H2Dialect
h2.jpa.show-sql=true
h2.jpa.hibernate.ddl-auto=create-drop


### C. postgres database -----------

postgres.datasource.driverClassName=org.postgresql.Driver
postgres.datasource.url=${DATABASE_URL:jdbc:postgresql://localhost:5432/postgres}
postgres.datasource.username=postgres
postgres.datasource.password=primary_pass

postgres.jpa.properties.hibernate.dialect=org.hibernate.dialect.PostgreSQLDialect
postgres.jpa.show-sql=false
postgres.jpa.hibernate.ddl-auto=create-drop

################
# Security
################
sb.customize.security=security_01
sb.customize.SecurityFilterChain=SecurityFilterChain_02

## OKTA
# 1. m2m : client will get token
spring.security.oauth2.client.registration.okta.authorization-grant-type=client_credentials
spring.security.oauth2.client.registration.okta.client-id=0oaldbk7ys8px41Gy5d7
spring.security.oauth2.client.registration.okta.client-secret=rZDEY1eocZN_0chnc804ZSztbEGSs0wO6teOV8DN1C12Z8u6lNpdMVOkhtpDpyJp
spring.security.oauth2.client.provider.okta.token-uri=https://dev-16206041.okta.com/oauth2/ausldbxlfakbwq32P5d7/v1/token
spring.security.oauth2.client.registration.okta.scope=app_read_lekhraj

# 2. validate token
spring.security.oauth2.resourceserver.jwt.issuer-uri=https://dev-16206041.okta.com/oauth2/ausldbxlfakbwq32P5d7

#Rabbitmq
spring.rabbitmq.host=localhost
spring.rabbitmq.port=5672
spring.rabbitmq.username=guest
spring.rabbitmq.password=guest
spring.rabbitmq.virtual-host=/
rabbit.mq.exchange=amq.direct
rabbit.mq.routingkey=key1
rabbit.mq.queue=spring.app.queue1

#################
# AWS
#################
aws.primary.region = us-west-2


# Mapping for the 'application' map
server.application.appName=MyApp
server.application.version=1.0.0
server.application.env=production

# Mapping for the 'config' map with List<String>
server.config1.db[0]=MySQL
server.config1.db[1]=PostgreSQL
server.config1.services[0]=ServiceA
server.config1.services[1]=ServiceB
server.config1.endpoints=/api/v1/status,/api/v1/data

# Mapping for the 'users' map with custom 'Credentials' class
server.users.admin.username=adminUser
server.users.admin.password=adminPass
server.users.guest.username=guestUser
server.users.guest.password=guestPass

# Mapping for the 'config' map with List<Credentials>
server.config2.admins[0].username=admin1
server.config2.admins[0].password=pass1
server.config2.admins[1].username=admin2
server.config2.admins[1].password=pass2

server.config2.users[0].username=user1
server.config2.users[0].password=user1pass
server.config2.users[1].username=user2
server.config2.users[1].password=user2pass

# ---------------- KAFKA ----------

app.kafka.consumer.kafka-generic-consumer-group.enabled=false

spring.kafka.bootstrap-servers=localhost:9092
spring.kafka.consumer.group-id=kafka-generic-consumer-group
spring.kafka.consumer.auto-offset-reset=earliest
spring.kafka.consumer.key-deserializer=org.apache.kafka.common.serialization.StringDeserializer
spring.kafka.consumer.value-deserializer=org.apache.kafka.common.serialization.StringDeserializer
# management.endpoints.web.exposure.include=health,info,prometheus







